<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>codessl</title>
 <link href="https://www.codessl.com/atom.xml" rel="self"/>
 <link href="https://www.codessl.com/"/>
 <updated>2016-04-03T07:51:33+08:00</updated>
 <id>https://www.codessl.com</id>
 <author>
   <name>Sheng-Loong Su</name>
   <email></email>
 </author>

 
 <entry>
   <title>Enterprise Integration with Ruby</title>
   <link href="https://www.codessl.com/blog/2016/04/03/enterprise-integration-with-ruby/"/>
   <updated>2016-04-03T00:00:00+08:00</updated>
   <id>https://www.codessl.com/blog/2016/04/03/enterprise-integration-with-ruby</id>
   <content type="html">&lt;p&gt;I gave a talk on “Enterprise Integration with Ruby” at the &lt;a href=&quot;http://www.meetup.com/Singapore-Ruby-Group/events/229502298/&quot;&gt;March meetup&lt;/a&gt; of Singapore Ruby Group.&lt;/p&gt;

&lt;p&gt;The motivation of this talk is to give a high-level walkthrough on my experiences and strategies for integrating Ruby apps with some classic Enterprise systems or services, which may be uncommon in the startup and open source world.&lt;/p&gt;

&lt;p&gt;In case you missed my talk, below is the video recorded by the awesome &lt;a href=&quot;https://engineers.sg/video/enterprise-integration-with-ruby-singapore-ruby-group--606&quot;&gt;Engineers.SG&lt;/a&gt;.&lt;/p&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;http://www.youtube.com/embed/j9f9lWvv3Uc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Below are my slides.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;728f7bf827fa44f78d774ce46bb7efd5&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
It was a great turnout and I thank everyone for listening to my talk.
I would also like to thank the meetup organisers and sponsors.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Migrating to Microservices and Cloud Native</title>
   <link href="https://www.codessl.com/blog/2016/02/14/migrating-to-microservices-and-cloud-native/"/>
   <updated>2016-02-14T00:00:00+08:00</updated>
   <id>https://www.codessl.com/blog/2016/02/14/migrating-to-microservices-and-cloud-native</id>
   <content type="html">&lt;p&gt;“Microservices” is yet another buzzword in the modern application development scene.
I always heard and read about it but had never actually implemented a non-trivial production system using Microservices architecture.&lt;/p&gt;

&lt;p&gt;Last week, I attended a 2-day workshop titled “Migrating a Monolith Application to Cloud Native” conducted by &lt;a href=&quot;http://pivotal.io&quot;&gt;Pivotal&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;migrating-a-monolith-application-to-cloud-native&quot;&gt;Migrating a Monolith Application to Cloud Native&lt;/h2&gt;
&lt;p&gt;You might have noticed that “Microservices” is never mentioned in the workshop title.
I believe that is Pivotal’s branding strategy to push for their “Cloud Native” offering - “Spring Boot” + “Cloud Foundry”.&lt;/p&gt;

&lt;p&gt;Nevertheless, the cool thing is the materials of the entire workshop can be found on GitHub at the following link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/S2EDU/MigratingAMonolithApplicationToCloudNative/blob/master/student_guide.adoc&quot;&gt;https://github.com/S2EDU/MigratingAMonolithApplicationToCloudNative/blob/master/student_guide.adoc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This page consists of links to all the slides and hands-on lab exercises.&lt;/p&gt;

&lt;p&gt;The following summarises some of my interesting learning points.&lt;/p&gt;

&lt;h3 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h3&gt;
&lt;p&gt;Spring Boot is Pivotal’s attempt to simplify Java app development by favoring convention over configuration.
This is achieved mostly by adding a few Maven dependencies and annotating Java classes.
If I had to develop a Java web app, I would consider Spring Boot.
However, I still feel more comfortable with Ruby on Rails.&lt;/p&gt;

&lt;h3 id=&quot;cloud-foundry&quot;&gt;Cloud Foundry&lt;/h3&gt;
&lt;p&gt;Cloud Foundry is Pivotal’s Platform-as-a-Service (PaaS), akin to Heroku, Amazon Elastic Beanstalk and Red Hat Openshift.
We operate on Cloud Foundry using Pivotal Web Console as well as the command line interface tool.
In particular, the command line tool makes application deployment as easy as running &lt;code class=&quot;highlighter-rouge&quot;&gt;cf push&lt;/code&gt; from the terminal.
Furthermore, Cloud Foundry’s Marketplace offers a wide range of services such as MySQL, MongoDB, Memcached, Message Queues, Redis, etc.&lt;/p&gt;

&lt;h3 id=&quot;shift-in-paradigm&quot;&gt;Shift in Paradigm&lt;/h3&gt;
&lt;p&gt;In the past, developers needed to make decision on the underlying hardware, virtualization platform and operating systems.
Recently, container technology such as Docker has become prevailing but still does not solve the problem of managing large number of containers.
PaaS addresses this pain point by allowing developers to focus on only Application and Data and forget about the underlying infrastructure.&lt;/p&gt;

&lt;h3 id=&quot;what-is-microservices&quot;&gt;What is Microservices?&lt;/h3&gt;
&lt;p&gt;My understanding of microservices is an architectural style where the system is composed of a suite of small independent and autonomous services.&lt;/p&gt;

&lt;h3 id=&quot;microservices-vs-soa&quot;&gt;Microservices vs SOA&lt;/h3&gt;
&lt;p&gt;Microservices is similar to Service Oriented Architecture (SOA) except that:-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enterprise Service Bus (ESB) is not used&lt;/li&gt;
  &lt;li&gt;Communication pipeline is lightweight and dumb, eg. REST and AMQP&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-to-split-a-monolith-into-microservices&quot;&gt;How to split a Monolith into Microservices?&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Based on domain classes and data relationship (boundary)&lt;/li&gt;
  &lt;li&gt;Based on persistence storage (RDBMS vs Graph Database)&lt;/li&gt;
  &lt;li&gt;Based on business value&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;standalone-server-vs-embedded-server&quot;&gt;Standalone Server vs Embedded Server&lt;/h3&gt;
&lt;p&gt;In the past, developers tended to deploy multiple application WAR/EAR into a server, eg. Tomcat, WebLogic, WebSphere, JBoss, etc.&lt;/p&gt;

&lt;p&gt;With microservices, it is usually the other way round where each application will launch its own embedded server, eg. Embedded Tomcat, Jetty, etc.
The benefit is each application server is independent of others.&lt;/p&gt;

&lt;h3 id=&quot;configuration-server&quot;&gt;Configuration Server&lt;/h3&gt;
&lt;p&gt;Spring Boot allows application configurations:-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;to be externalised by using &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; and Spring profiles&lt;/li&gt;
  &lt;li&gt;to be overridden by environment variables if available&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach is taken a step further by centralising configuration for all microservices in a single Git repository.&lt;/p&gt;

&lt;p&gt;A Configuration Server is used for:-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;pulling configuration data from the Git repository&lt;/li&gt;
  &lt;li&gt;serving configuration data to the respective microservices&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;service-registry&quot;&gt;Service Registry&lt;/h3&gt;
&lt;p&gt;All microservices have to register as “Producer” or “Consumer” with the Service Registry.
This allows microservices to discover and talk to each other using the service name provided by the Service Registry, instead of hardcoding the microservices URLs.&lt;/p&gt;

&lt;p&gt;Pivotal recommends building service registry with Netflix’s open source “Eureka”.
Pivotal also recommends building consumer with Netflix’s open source “Feign”.&lt;/p&gt;

&lt;h3 id=&quot;client-side-load-balancing&quot;&gt;Client-side Load Balancing&lt;/h3&gt;
&lt;p&gt;I have to admit that this is a very new concept for me.
Traditionally, load balancing is done in the server-side.
Instead, microservices use client-side load balancing to decide which particular producer service to call.
This allows consumers to intelligently select the best producer based on certain metrics such as network latency.
The tradeoff is we cannot ensure that the service call load is evenly distributed among the producer microservices.&lt;/p&gt;

&lt;p&gt;Pivotal recommends implementing client-side load balancing with Netflix’s open source “Ribbon”.&lt;/p&gt;

&lt;h3 id=&quot;circuit-breaker&quot;&gt;Circuit Breaker&lt;/h3&gt;
&lt;p&gt;The idea is a consumer calls a circuit breaker which checks the endpoint and responds to the consumer with whether the service call can be made successfully.
If the service call fails for some reasons, the consumer simply proceeds with the error handling instead of calling the endpoint again and again subsequently.&lt;/p&gt;

&lt;p&gt;Pivotal recommends implementing circuit breaker with Netflix’s open source “Hystrix”, which also comes with a nifty monitoring dashboard module.&lt;/p&gt;

&lt;h3 id=&quot;to-be-continued&quot;&gt;To be Continued&lt;/h3&gt;
&lt;p&gt;Microservices is undoubtedly the trend for scalable architecture.&lt;/p&gt;

&lt;p&gt;There are still a few questions unanswered:-&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When is microservices not recommended?&lt;/li&gt;
  &lt;li&gt;How to effectively split the development team and system into microservices?&lt;/li&gt;
  &lt;li&gt;How to secure microservices?&lt;/li&gt;
  &lt;li&gt;How to automate integration testing for microservices?&lt;/li&gt;
  &lt;li&gt;How to set up monitoring and alerts for microservices?&lt;/li&gt;
  &lt;li&gt;How to implement microservices and cloud native on premise in a secure and restrictive environment?&lt;/li&gt;
  &lt;li&gt;… etc.&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Getting Started with Clojure</title>
   <link href="https://www.codessl.com/blog/2015/06/22/getting-started-with-clojure/"/>
   <updated>2015-06-22T00:00:00+08:00</updated>
   <id>https://www.codessl.com/blog/2015/06/22/getting-started-with-clojure</id>
   <content type="html">&lt;p&gt;Fellow Rubyists seem excited about learning Clojure.&lt;/p&gt;

&lt;p&gt;If you’re still puzzled by this seemingly hipster language, I recommend you to watch the talk titled “You really should know a little bit of Clojure” below.&lt;/p&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;http://www.youtube.com/embed/c9TSQJPKs6A&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;Ben Orenstein (&lt;a href=&quot;https://twitter.com/r00k&quot;&gt;@r00k&lt;/a&gt;) from &lt;a href=&quot;https://thoughtbot.com/&quot;&gt;ThoughtBot&lt;/a&gt; gave an excellent introduction to Clojure and also showcased some cool features of the language.&lt;/p&gt;

&lt;p&gt;Ben explained how learning a functional programming language like Clojure can help Rubyists write better code.&lt;/p&gt;

&lt;p&gt;Admittedly, I am completely sold.&lt;/p&gt;

&lt;p&gt;One really impressive demo is on the Clojure macro system, which appears to be more superior than Ruby metaprogramming.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;ht&quot; dir=&quot;ltr&quot;&gt;Java Reflection &amp;lt; Ruby Metaprogramming &amp;lt; Clojure Macros&lt;/p&gt;&amp;mdash; Sheng-Loong Su (@code_ssl) &lt;a href=&quot;https://twitter.com/code_ssl/status/601392222823526404&quot;&gt;May 21, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Enough sales pitch. Let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;We can download clojure.zip from the &lt;a href=&quot;http://clojure.org/getting_started&quot;&gt;official Clojure website&lt;/a&gt; and follow the instruction to have the minimal install.&lt;/p&gt;

&lt;p&gt;Instead, I installed Clojure via Leiningen which - as its &lt;a href=&quot;http://leiningen.org/&quot;&gt;homepage&lt;/a&gt; brags about - is “the easiest way to use Clojure”. To be precise, Leiningen is an extensible build tool for Clojure that provides dependency management, REPL support, testing, packaging, deployment, and many other capabilities.&lt;/p&gt;

&lt;p&gt;However, I did not follow their installation instruction as I prefer Homebrew. Below are the steps that I did:-&lt;/p&gt;

&lt;p&gt;Step 0: Install Java JDK version 6 or newer if you haven’t (&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Step 0.5: Install Homebrew if you haven’t (&lt;a href=&quot;http://brew.sh&quot;&gt;http://brew.sh&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Step 0.9: Update Homebrew&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
brew update
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 1: Install Leiningen&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
brew install leiningen
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Fire up REPL to test&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
lein repl
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, You have got Clojure up and running!&lt;/p&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h2&gt;

&lt;p&gt;To learn the basics, work through Try Clojure (&lt;a href=&quot;http://www.tryclj.com&quot;&gt;http://www.tryclj.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;After that, work through Brave Clojure (&lt;a href=&quot;http://www.braveclojure.com&quot;&gt;http://www.braveclojure.com&lt;/a&gt;). I can’t recommend it enough.&lt;/p&gt;

&lt;p&gt;Many Clojure experts favor Emacs but I use Vim. Gabe Hollombe (&lt;a href=&quot;https://twitter.com/gabehollombe&quot;&gt;@gabehollombe&lt;/a&gt;) from &lt;a href=&quot;http://www.neo.com&quot;&gt;Neo&lt;/a&gt; wrote an excellent post on how to “Use Clojure in Vim” (&lt;a href=&quot;http://www.neo.com/2014/02/25/getting-started-with-clojure-in-vim&quot;&gt;http://www.neo.com/2014/02/25/getting-started-with-clojure-in-vim&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Have fun learning Clojure &amp;lt;3 &amp;lt;3 &amp;lt;3&lt;/p&gt;
</content>
 </entry>
 

</feed>
